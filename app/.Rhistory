max = 50,
value = 10),
selectInput(inputId = 'unit',
'Distance Unit',
c('Kilometres' = 'km',
'Miles' = 'mile')),
selectInput("reason.for.visit", "Reason for Visit", c("Stroke", "Heart Failure", "Heart Attack",
"Hip or Knee Replacement", "Coronary Bypass Artery Surgery",
"Tobacco Use", "Alcohol Use", "Other Surgery", "Mental Illness",
"Other")),
div(style="display:inline-block;width:98%;text-align: center;",submitButton("Submit"))
)
),
# organizes the main body of the dashboard
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
),
# sets the primary box for the main body
box(width = 20, status = "success",
tabItems(
tabItem(tabName = "about",
#  h1("Insert introduction here"),
#  htmlOutput("introduction"),
includeHTML("../about2.html"),
#                              includeHTML("../Technical_Description.html"),
br()
),
# adds the main data set tab
tabItem(tabName = "datatable",
box(title = "Map",
id = "tabset1",
# height = "470px",
width = 12,
status = "success",
collapsible = TRUE,
solidHeader = TRUE,
leafletOutput("mymap")
),
box(
title = "Hospitals Rankings", status = "success", solidHeader = TRUE,
width = 12,
collapsible = TRUE,
#height = "230px",
DT::dataTableOutput('recommendedHospitals'))
)
)
)
)
)
)
install.packages("fluidPage")
shiny::runApp('C:/Users/lenovo/OneDrive/Desktop/sem 7/app')
#install.packages("scales")
#install.packages("lattice")
#install.packages("tidyverse")
#install_github("https://github.com/rstudio/htmltools")
#install.packages("maps")
#install.packages("data.table")
#install.packages("dtplyr")
#install.packages("mapproj")
#install.packages("randomForest")
#install.packages("rpart")
#install.packages("plyr")
#install.packages("choroplethr")
#install.packages("viridis")
#install.packages("viridisLite")
library(shiny)
library(leaflet)
library(scales)
library(lattice)
library(tidyverse)
library(htmltools)
library(maps)
library(plotly)
library(data.table)
library(dtplyr)
library(mapproj)
library(randomForest)
library(ggplot2)
library(rpart)
library(plyr)
library(choroplethr)
library(shinydashboard)
library(viridis)
library(viridisLite)
#install.packages("rgdal")
library("rgdal")
#####load##########
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\importance.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\df.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\hospital_ratings.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\plot1data.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\f.RData")
#####server#########
shinyServer <- function(input, output) {
##########plot 1##########
output$HosNumByState <- renderPlotly({
c <- ggplot(HosNumByState, aes(x = State, y = Freq)) +
geom_bar(stat = "identity", aes(fill =Freq)) +
labs(title = "Number of Hospital by State", x = "State", y = NULL) +
theme_classic()+
theme(axis.text.x = element_text(angle = 90, size = 8)) +
theme(plot.title = element_text(hjust = 0.5, vjust = 1)) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_viridis(name = "Frequency")+
theme(plot.margin = unit(c(1,1,1,1), "cm"))
ggplotly(c,height = 500, width = 1200)
}
)
##############plot2################
output$map <- renderPlotly({
myFunction <- function(hospital, topic) {
output <- hospital %>%
filter(sub %in% as.vector(topic)) %>%
ddply(.(Provider.State), summarise,
expected_cost =
sum(as.vector(as.numeric(Total.Discharges)) * (as.vector(as.numeric(Average.Covered.Charges)) +
as.vector(as.numeric(Average.Total.Payments)))) /
sum(as.vector(as.numeric(Total.Discharges)))) %>%
select(Provider.State, expected_cost)
return(output)
}
df <- myFunction(hospital_payment, input$sub)
colnames(df) <- c("region","value")
df$region <- state.name[match(df$region,state.abb)]
df$region[is.na(df$region)] <- "DC"
df$region <- tolower(df$region)
df$hover <- with(df, paste("state",region, '<br>', "value", value))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~value, text = ~hover, locations = ~region,
color = ~value, colors = viridis(n=256)
) %>%
colorbar(title = "USD") %>%
layout(
geo = g
)
})
##############plot3################
output$map1 <- renderPlotly({
myFunction <- function(hospital, topic) {
output <- hospital %>%
filter(Hospital.Ownership %in% as.vector(topic)) %>%
ddply(.(Provider.State), summarise,
expected_cost =
sum(as.vector(as.numeric(Total.Discharges)) * (as.vector(as.numeric(Average.Covered.Charges)) +
as.vector(as.numeric(Average.Total.Payments)))) /
sum(as.vector(as.numeric(Total.Discharges)))) %>%
select(Provider.State, expected_cost)
return(output)
}
df <- hospital %>% inner_join(hospital_payment, by = c("Provider.ID" = "Provider.Id"))
df <- myFunction(df, input$sub1)
colnames(df) <- c("region","value")
df$region <- state.name[match(df$region,state.abb)]
df$region[is.na(df$region)] <- "DC"
df$region <- tolower(df$region)
df$hover <- with(df, paste("state",region, '<br>', "value", value))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~value, text = ~hover, locations = ~region,
color = ~value, colors = viridis(n=256,option = 'B')
) %>%
colorbar(title = "USD") %>%
layout(
title = 'Ownership',
geo = g
)
})
########map###############
state<-reactive({state<-input$state})
type <- reactive({type <- input$type})
care1 <- reactive({input$care1}) # Mortality
care2 <- reactive({input$care2}) # Safety of care
care3 <- reactive({input$care3}) # Readmission rate
care4 <- reactive({input$care4}) # Patient experience
care5 <- reactive({input$care5}) # Effectiveness of care
care6 <- reactive({input$care6}) # Timeliness of care
care7 <- reactive({input$care7}) # Efficient use of medical imaging
v1<-reactive({
if (state() == "Select") {v1<-f%>%
filter(Mortality>=care1())%>%
filter(Safety>=care2())%>%
filter(Readmission>=care3())%>%
filter(Patient.experience>=care4())%>%
filter(Effectiveness>=care5())%>%
filter(Timeliness>=care6())%>%
filter(Efficient.use.of.medical.image>=care7())
}
else {
selectstate<-state()
v1<- f %>% filter(Provider.State == state())%>%
filter(Mortality>=care1())%>%
filter(Safety>=care2())%>%
filter(Readmission>=care3())%>%
filter(Patient.experience>=care4())%>%
filter(Effectiveness>=care5())%>%
filter(Timeliness>=care6())%>%
filter(Efficient.use.of.medical.image>=care7())
}
})
v2 <- reactive({
if (type() == "Select") {v2 <- v1()}
else{
v2 <- v1() %>% filter(mdc == type())}})
care.origin <- reactive(care.origin <- c(care1(),care2(),care3(),
care4(),care5(),care6(),care7()))
#define functions to give personalized ranking
personal_rank <- function(data,care.vec){
if (is.na(data[1,1])) {data[1,]<-NA; data$score<-NA; data$rank<-NA}
else {
# weight suggested for 7 criterion
origin.weight <- c(11,11,11,11,2,2,2);
# care weight for 7 criterion
care.weight <- origin.weight*care.vec;
# hospital scores for 7 criterion
criterion.score <- as.matrix(data%>%select(Mortality,Safety,Readmission,
Patient.experience,Effectiveness,Timeliness,
Efficient.use.of.medical.image));
criterion.score[is.na(criterion.score)] <- 0;
#criterion.score <- as.numeric(c(row[row[32:38]]))
score<-c();
for (i in 1:length(criterion.score[,1])) {
score[i] <- sum(care.weight*criterion.score[i,])
};
data$score<-score;
data$rank<-frankv(data,cols = 'score',ties.method = 'first',order=-1);
data<-data[order(data$score,decreasing = T),]
}
return(data)
}
# switch payment to dollar signs
payswitch <- function(payment){
if(is.na(payment)) {return("Not Avaliable")}
else {if(payment<=4328) {return("$")}
else{if(payment<=5837) {return("$$")}
else{if(payment<=8383) {return("$$$")}
else{return("$$$$")}}}}
}
# switch overall rating
orswitch <- function(rating){
if(is.na(rating)){return("Not Available")}
else {return(as.numeric(rating))}
}
# Care vector for 7 criterion
care.vec <- reactive(as.numeric(care.origin()))
# Scores of hospitals in the selected state
score <- reactive(apply(data.frame(v2()),1,calScore,care.vec = care.vec()))
score
# orders for hospitals
ord <- reactive(order(score(),decreasing = TRUE))
# ranks for hospitals
v3<-reactive({v2<- personal_rank(v2(),care.vec())})
#Icon for the markers
hospIcons <- iconList(emergency = makeIcon("emergency_icon.png", iconWidth = 25, iconHeight =30),
critical = makeIcon("critical_icon.png", iconWidth = 25, iconHeight =30),
children = makeIcon("children_icon.png", iconWidth = 20, iconHeight =30))
output$intermap <- renderLeaflet({
content <- paste(sep = "<br/>",
paste("<font size=4>","<font color=red>","<b>",v2()$Provider.Name,"</b>"),
paste("<font size=1>","<font color=black>",v2()$Address),
paste(v2()$City, v2()$State, v2()$ZIP.Code, sep = " "),
paste("<b>","Tel: ","</b>","(",substr(v2()[ ,"Phone.Number"],1,3),") ",substr(v2()[ ,"Phone.Number"],4,6),"-",substr(v2()[ ,"Phone.Number"],7,10),sep = ""),
paste("<b>","Hospital Type: ","</b>",as.character(v2()$Hospital.Type)),
paste("<b>","Hospital Ownership: ","</b>",as.character(v2()$Hospital.Ownership)),
paste("<b>","Provides Emergency Services: ","</b>",as.character(v2()[ ,"Emergency.Services"])),
paste("<b>","Overall Rating: ","</b>", as.character(v2()[ ,"Hospital.overall.rating"])),
paste("<b>","Personalized Ranking: ","</b>",v3()$rank,"</b>","out of ","</b>",length(v3()$rank)),
paste("<b>","Average cost of chosen disease for each discharge: ", "</b>",as.character(v2()[ ,"averagepay_MDC_hos_per_discharge"])))
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE,
position = 'bottomleft') %>%
addPolygons(stroke = T,color = 'grey',weight = 1,fillOpacity = 0,
highlightOptions = highlightOptions(color = "black", weight = 2,bringToFront = TRUE)) %>%
addMarkers(v2()$lon, v2()$lat, popup = content, icon = hospIcons[v2()$TF], clusterOptions = markerClusterOptions())%>%
addEasyButton(easyButton(
icon="fa-globe", title="Zoom to Level 1",
onClick=JS("function(btn, map){ map.setZoom(1); }"))) %>%
addEasyButton(easyButton(
icon="fa-crosshairs", title="Locate Me",
onClick=JS("function(btn, map){ map.locate({setView: true}); }")))
})
output$tablerank = renderDataTable({
rankedtable <- v3()%>%select(rank,Provider.Name,Provider.Street.Address,Provider.City,
Phone.Number,averagepay_MDC_hos_per_discharge)
rankedtable$averagepay_MDC_hos_per_discharge <- apply(data.frame(rankedtable$averagepay_MDC_hos_per_discharge),1,payswitch)
colnames(rankedtable) <- c("Rank","Hospital Name","Address","City",
"TEL","COST")
rankedtable
},options = list(orderClasses = TRUE, iDisplayLength = 5, lengthMenu = c(5, 10, 15, 20)))
}
## Load Packages -----
#install.packages("dplyr")
#install.packages("RColorBrewer")
#install.packages("stringr")
#install.packages("ggplot2")
#install.packages("reshape2")
#install.packages("geosphere")
#install.packages("ggthemes")
#install.packages("formattable")
#install.packages("base64enc")
#install.packages("plotly")
#install.packages("shinydashboard")
library("shiny")
library("leaflet")
library("dplyr")
library("RColorBrewer")
library("stringr")
library("parcoords")
library("ggplot2")
library("reshape2")
library("geosphere")
library("ggthemes")
library("formattable")
library("base64enc")
library("plotly")
library('shinydashboard')
#install.packages("devtools")
#install.packages("sf")
library("sf")
library("devtools")
#install_github("https://github.com/timelyportfolio/parcoords")
##Import Data -----
final_hos<-read.csv("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\data\\cleaned_data.csv",stringsAsFactors = F)
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\importance.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\df.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\hospital_ratings.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\plot1data.RData")
load("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\f.RData")
##1.Find Hospital -----
tab1 <- tabPanel("Find Your Hospital",
#CSS file for page style
includeCSS("C:\\Users\\lenovo\\OneDrive\\Desktop\\Fall Sem 2022-2023\\project\\Healthcare_Intelligence--Interactive_Hospital_Recommendation_App-master\\app\\theme.css"),
tags$div(
leafletOutput("intermap",width="100%", height= "600px"),
absolutePanel(id = "controls", class ="City_Carrier_panel panel panel-default", fixed =F,
draggable =FALSE, top = 80, left = "auto", right = 20,
bottom = "auto", width = 320, height = "auto",
h2("Preference Selection"),
selectInput("state", label = "State",
choices = c("Select","AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN",
"IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV",
"NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN",
"TX","UT","VT","VA","WA","WV","WI","WY"), selected = "Select"),
selectInput("type", label = "Disease Type",
choices = c("Nervous system" ,"Respiratory System","Circulatory System",
"Digestive System" ,  "Hepatobiliary System & Pancreas"   ,
"Musculoskeletal System & Connective Tissue",
"Skin, Subcutaneous Tissue & Breast" ,
" Endocrine, Nutritional & Metabolic System" ,
" Kidney & Urinary Tract" ,
" Blood, Blood Forming Organs & Immunological Disorders",
" Infectious & Parasitic Disease & Disorders"  ,
" Mental Diseases & Disorders",
" Injuries, Poison & Toxic Effects of Drugs" ,
" Factors influencing Health Status",
"Ear, Nose, Mouth & Throat"), selected = "Ear, Nose, Mouth & Throat"),
radioButtons("care1",label = "Mortality",
choices = list("Very Care"=3,"Care"=2,"Not Care"=1),
selected = 1, inline = T),
radioButtons("care2",label = "Safety of Care",
choices = list("Very Care"=3,"Care"=2,"Not Care"=1),
selected = 1, inline = T),
radioButtons("care3",label = "Readmission Rate",
choices = list("Very Care"=3,"Care"=2,"Not Care"=1),
selected = 1, inline = T),
radioButtons("care4",label = "Patient Experience",
choices = list("Very Care"=3,"Care"=2,"Not Care"=1),
selected = 1, inline = T),
radioButtons("care5",label = "Effectiveness of Care",
choices = list("Very Care"=3,"Care"=2,"Not Care"=1),
selected = 1, inline = T),
radioButtons("care6",label = "Timeliness of Care",
choices = list("Very Care"=3,"Care"=2,"Not Care"=1),
selected = 1, inline = T),
radioButtons("care7",label = "Efficient Use of Medical Imaging",
choices = list("Very Care"=3,"Care"=2,"Not Care"=1),
selected = 1, inline = T)),
tabBox(width = 12,
tabPanel('Personalized Ranking',
dataTableOutput("tablerank"),
tags$style(type="text/css", '#myTable tfoot {display:none;}')
))))
##2.Descriptive Statistics -----
tab2 <- navbarMenu("Find More Insights",
tabPanel(title = "Total Cost By Disease Type",
h3("Total Cost (USD) By MDC",style="color:	black",align="center",offset = -1,astyle ="font-family:helvetica;"),
fluidRow( wellPanel(style = "overflow-y:scroll;  height: 600px; opacity: 0.9; background-color: #ffffff;",
column(width = 9, plotlyOutput("map")),
column(width = 3,  selectInput("sub",
label = "Select MDC (Disease Type)",
choices = unique(hospital$sub)),
helpText('The Major Diagnostic Categories (MDC) are formed by dividing all
possible principal diagnoses (from ICD-9-CM) into 25 mutually exclusive
diagnosis areas. MDC codes, like diagnosis-related group (DRG) codes,
are primarily a claims and administrative data element unique to the
United States medical care reimbursement system. DRG codes also are mapped,
or grouped, into MDC codes.',
br(),
br(),
'Obviously, charges vary with different MDC because
disparate disease need different degree of treatment.',
br(),
'Here,you can explore the discrepancy of average total cost between different ownerships.')
))
)),
tabPanel(title = "Total Cost By Ownership",
h3("Total Cost (USD) By Ownership",style="color:	black",align="center",offset = -1,astyle ="font-family:helvetica;"),
fluidRow( wellPanel(style = "overflow-y:scroll;  height: 600px; opacity: 0.9; background-color: #ffffff;",
column(width = 9, plotlyOutput("map1")),
column(width = 3,  selectInput("sub1",
label = "Select a type of Ownership",
choices = unique(hospital$Hospital.Ownership),
selected =  unique(hospital$Hospital.Ownership)[2]),
helpText('Usually, charges vary with different sorts of ownership.',
br(),
'Here,you can explore the discrepancy of average total cost between different ownerships.')
))
)),
tabPanel(title = "Number of Hospitals of Each State",
h3("Number of Hospitals of Each State",style="color:	black",align="center",offset = -1,astyle ="font-family:helvetica;"),
fluidRow( wellPanel(style = "overflow-y:scroll;  height: 600px; opacity: 0.9; background-color: #ffffff;",
plotlyOutput("HosNumByState")))))
##3.Insturction -----
tab3 <-navbarMenu("Insturction",
tabPanel(title="Introduction",
fluidRow(
wellPanel(style = "overflow-y:scroll; height: 600px; opacity: 0.9; background-color: #ffffff;",
h1("Introduction"),
p("Greetings! If you are thinking of finding a hospital you can go,
you can just save your time and look at our app. Our group has created an
app helping you to find the best hospitals around you based on your preference on 7 aspects
of hospitals including mortality, safety of care, readmission rate, patient experience,
effectiveness of care, timeliness of care and efficient use of medical imaging.
With your choice. You can see what they measures respectively below.
It will be so easy to find the one fits you the best."),
h3("Measurements"),
br(),
strong("Mortality:"),p("the death rate of patients"),
br(),
strong("Safety of care:"),p(" the rate of certain complications and infections"),
br(),
strong("Readmission rate:"),p("the rate of unplanned readmission after treatment"),
br(),
strong("Patient experience"),p("how well patients feel during treatment, surgery and hospitalization"),
br(),
strong("Effectiveness of care"),p("how appropriately patients are treated"),
br(),
strong("Timeliness of care"),p("the time patients waiting"),
br(),
strong("Efficient use of medical imaging"),p("how efficiently the hospitals using medical imaging such as MRI and CT scans"),
br(),
p("For more information, click the link below:"),
a("Here",href = "https://www.medicare.gov/hospitalcompare/Data/Measure-groups.html")))),
tabPanel(title="User Guide",
fluidRow(
wellPanel(style = "overflow-y:scroll; height: 600px; opacity: 0.9; background-color: #ffffff;",
h1("User Guide"),
strong("Step1:"),p("Choose the state and types of dieases"),
br(),
strong("Step2:"),p("Choose your preferences of hospital"),
br(),
strong("Step3:"),p("Check the Personalized Ranking table for the basic information of all hospitals"),
br(),
strong("Step4:"),p("Click on the map to see the exact location of the hospital"),
br(),
strong("Step5:"),p("You can also locate yourself by clicking the location button on the left side of the map")))),
tabPanel(title="Developers",
fluidRow(
wellPanel(style = "overflow-y:scroll; height: 600px; opacity: 0.9; background-color: #ffffff;",
h1("Developers"),
strong("katragadda vigneswar siddu, vigneswar.siddu2019@vitstudent.ac.in"), br(),
strong("Arcot gayathri, gayathri2019@vitstudent.ac.in"), br(),
strong("Nikkitha, nikkitha2019@vitstudent.ac.in"), br(),
strong("Nageshwari, Nageshwari2019@vitstudent.ac.in")
))))
## UI
ui <- shinyUI(navbarPage(title = strong("Hospital Interactive Recommender"),
tab1,
tab2,
tab3
))
runApp()
runApp()
runApp()
runApp()
runApp()
